-- User table for general user information 
CREATE TABLE User ( 
    user_id INT PRIMARY KEY AUTO_INCREMENT, 
    username VARCHAR(50) NOT NULL, 
    password VARCHAR(255) NOT NULL, 
    email VARCHAR(100) UNIQUE NOT NULL, 
    profile_picture VARCHAR(255), -- URL or path to the profile picture 
    role ENUM('Admin', 'Caregiver', 'Consultant', 'Careseeker') NOT NULL, 
    profile_info TEXT, 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP 
); 

-- Caregiver table with a foreign key reference to User 
CREATE TABLE caregiver (
    caregiver_id INT PRIMARY KEY,
    FOREIGN KEY (caregiver_id) REFERENCES user(user_id) ON DELETE CASCADE,
    address VARCHAR(255),
    contact_info VARCHAR(100),
    years_of_experience INT,
    availability_status BOOLEAN,
    caregiver_type ENUM('long', 'short', 'both'),
    specialty TEXT,
    skills TEXT, 
    national_id VARCHAR(50),
    is_approved ENUM('pending', 'approved', 'rejected') DEFAULT 'pending'
); 

-- Careseeker table with a foreign key reference to User 
CREATE TABLE Careseeker ( 
    careseeker_id INT PRIMARY KEY, 
    FOREIGN KEY (careseeker_id) REFERENCES User(user_id) ON DELETE CASCADE, 
    medical_info TEXT, 
    address VARCHAR(255), 
    contact_info VARCHAR(50), 
    rating DECIMAL(3, 2) DEFAULT 0 -- Average rating for display 
); 

-- MedicalRecord table for storing medical records for each Careseeker 
CREATE TABLE MedicalRecord ( 
    record_id INT PRIMARY KEY AUTO_INCREMENT, 
    careseeker_id INT, 
    record_type ENUM('Document', 'Image', 'Text') NOT NULL, 
    record_content TEXT, 
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    FOREIGN KEY (careseeker_id) REFERENCES Careseeker(careseeker_id) ON DELETE CASCADE 
); 

-- Consultant table with a foreign key reference to User 
CREATE TABLE Consultant ( 
    consultant_id INT PRIMARY KEY, 
    FOREIGN KEY (consultant_id) REFERENCES User(user_id) ON DELETE CASCADE, 
    expertise TEXT,
    qualifications Text, 
    consultant_type ENUM('doctor','therapist','pshycho'),
    availability_status BOOLEAN,  
    rating DECIMAL(3, 2) DEFAULT 0,  
    bio TEXT ,
    is_approved ENUM('pending', 'approved', 'rejected') DEFAULT 'pending'
    
); 

-- ApprovalRequest table for handling approval requests 
CREATE TABLE ApprovalRequest ( 
    request_id INT PRIMARY KEY AUTO_INCREMENT, 
    user_id INT, -- References the User table for both Caregivers and Consultants 
    request_type ENUM('Caregiver', 'Consultant') NOT NULL, 
    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    status ENUM('Pending', 'Approved', 'Declined') DEFAULT 'Pending', 
    comments TEXT, 
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE 
); 

-- Document table for storing verification documents related to approval requests 
CREATE TABLE Document ( 
    document_id INT PRIMARY KEY AUTO_INCREMENT, 
    request_id INT, -- References the ApprovalRequest table 
    user_id INT, -- Redundant, but helps in directly associating document with a user 
    document_type VARCHAR(50), 
    file_path VARCHAR(255) NOT NULL,  
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    FOREIGN KEY (request_id) REFERENCES ApprovalRequest(request_id) ON DELETE CASCADE, 
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE 
); 

-- Request table to handle service requests made by Careseekers to Caregivers or Consultants 
CREATE TABLE Request ( 
    request_id INT PRIMARY KEY AUTO_INCREMENT, 
    careseeker_id INT, 
    caregiver_id INT, -- Nullable, only filled for Caregiver requests 
    consultant_id INT, -- Nullable, only filled for Consultant requests 
    request_type ENUM('Caregiver', 'Consultant') NOT NULL, -- Type of request 
    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    status ENUM('Pending', 'Accepted', 'Cancelled') DEFAULT 'Pending', 
    comments TEXT, 
    FOREIGN KEY (careseeker_id) REFERENCES Careseeker(careseeker_id) ON DELETE CASCADE, 
    FOREIGN KEY (caregiver_id) REFERENCES Caregiver(caregiver_id) ON DELETE SET NULL, 
    FOREIGN KEY (consultant_id) REFERENCES Consultant(consultant_id) ON DELETE SET NULL 
); 

-- Appointment table for scheduling and tracking appointments 
CREATE TABLE Appointment ( 
    appointment_id INT PRIMARY KEY AUTO_INCREMENT, 
    request_id INT, 
    date DATE, 
    time TIME, 
    status ENUM('Scheduled', 'Completed', 'Cancelled') DEFAULT 'Scheduled', 
    notes TEXT, 
    FOREIGN KEY (request_id) REFERENCES Request(request_id) ON DELETE CASCADE 
); 

-- Payment table to handle payment information related to appointments 
CREATE TABLE Payment ( 
    payment_id INT PRIMARY KEY AUTO_INCREMENT, 
    appointment_id INT, 
    amount DECIMAL(10, 2), 
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    status ENUM('Paid', 'Unpaid', 'Pending') DEFAULT 'Pending', 
    FOREIGN KEY (appointment_id) REFERENCES Appointment(appointment_id) ON DELETE CASCADE 
); 

-- Review table to store reviews and ratings from users 
CREATE TABLE Review ( 
    review_id INT PRIMARY KEY AUTO_INCREMENT, 
    reviewer_id INT, -- User providing the review 
    reviewed_user_id INT, -- User receiving the review 
    review_role ENUM('Caregiver', 'Consultant', 'Careseeker') NOT NULL, -- Role of reviewed user 
    rating DECIMAL(2, 1) CHECK (rating >= 1 AND rating <= 5), -- Rating out of 5 
    review_text TEXT, 
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    FOREIGN KEY (reviewer_id) REFERENCES User(user_id) ON DELETE CASCADE, 
    FOREIGN KEY (reviewed_user_id) REFERENCES User(user_id) ON DELETE CASCADE 
); 

-- Announcement table for storing announcements made by the Admin 
CREATE TABLE Announcement ( 
    announcement_id INT PRIMARY KEY AUTO_INCREMENT, 
    admin_id INT, -- References the Admin user creating the announcement 
    title VARCHAR(255) NOT NULL, -- Title of the announcement 
    content TEXT NOT NULL, -- Main content of the announcement 
    publish_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- When the announcement was published 
    FOREIGN KEY (admin_id) REFERENCES User(user_id) ON DELETE SET NULL 
);

-- Interview table for storing interviews for approval requests by the moderator
CREATE TABLE interviews (
    interview_id INT AUTO_INCREMENT PRIMARY KEY,
    request_id INT NOT NULL,
    request_date DATE NOT NULL,
    interview_time TIME NOT NULL,
    service VARCHAR(255) NOT NULL,
    platform VARCHAR(255) NOT NULL,
    meeting_link VARCHAR(255),
    provider_id VARCHAR(255) NOT NULL,
    provider_name VARCHAR(255) NOT NULL,
    provider_email VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES approvalrequest(request_id) ON DELETE CASCADE
);

-- ElderProfile table for storing elder profiles of the careseeker
CREATE TABLE ElderProfile (
    elder_id INT PRIMARY KEY AUTO_INCREMENT,
    careseeker_id INT NOT NULL, -- Reference to the Careseeker
    first_name VARCHAR(100),
    middle_name VARCHAR(100),
    last_name VARCHAR(100),
    relationship_to_careseeker VARCHAR(50),
    age INT,
    gender ENUM('Male', 'Female', 'Other'),
    weight DECIMAL(5, 2),
    height DECIMAL(5, 2),
    blood_pressure VARCHAR(20),
    emergency_contact VARCHAR(20),
    chronic_disease TEXT,
    current_health_issues TEXT,
    allergies TEXT,
    surgical_history TEXT,
    family_diseases TEXT,
    current_medications TEXT,
    special_needs TEXT,
    dietary_restrictions TEXT,
    health_barriers TEXT, -- New column for health barriers
    profile_picture VARCHAR(255), -- Path or URL of the profile picture
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (careseeker_id) REFERENCES Careseeker(careseeker_id) ON DELETE CASCADE
);




-- create a view to get profile info
CREATE VIEW careseeker_profile AS 
SELECT * FROM user JOIN careseeker ON user.user_id =careseeker.careseeker_id;


CREATE TABLE cg_shedules(
    id INT AUTO_INCREMENT PRIMARY KEY,
    caregiver_id INT NOT NULL,
    sheduled_date DATE NOT NULL,
    status ENUM('approved', 'pending', 'unavailable') NOT NULL,
    shift ENUM('morning', 'evening', 'overnight', 'fullday') NOT NULL,
    request_id INT,
    FOREIGN KEY (caregiver_id) REFERENCES users(id),
    FOREIGN KEY (request_id) REFERENCES care_requests(id)
);

CREATE TABLE cg_long_shedules(
    id INT AUTO_INCREMENT PRIMARY KEY,
    caregiver_id INT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status ENUM('approved', 'pending', 'unavailable') NOT NULL,
    request_id INT,
    FOREIGN KEY (caregiver_id) REFERENCES users(id),
    FOREIGN KEY (request_id) REFERENCES care_requests(id)
);


CREATE TABLE co_availability_patterns (
    id INT AUTO_INCREMENT PRIMARY KEY,
    consultant_id INT NOT NULL,
    day_of_week TINYINT NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6),
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL, 
    FOREIGN KEY (consultant_id) REFERENCES consultant(consultant_id)
);

-- Table for actual availability instances
CREATE TABLE co_availability_instances (
    id INT AUTO_INCREMENT PRIMARY KEY,
    consultant_id INT NOT NULL,
    available_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    FOREIGN KEY (consultant_id) REFERENCES consultant(consultant_id)
);







CREATE TABLE `care_payments` (
  `payment_id` int(11) NOT NULL AUTO_INCREMENT,
  `care_request_id` int(11) NOT NULL,
  `payer_id` int(11) NOT NULL,
  `caregiver_id` int(11) NOT NULL,
  `amount` decimal(10,2) NOT NULL,
  `payment_method` varchar(50) DEFAULT 'Stripe',
  `payment_date` datetime DEFAULT current_timestamp(),
  `is_refunded` tinyint(1) DEFAULT 0,
  `refund_reason` text DEFAULT NULL,
  `refund_date` datetime DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`payment_id`),
  KEY `fk_care_request_id` (`care_request_id`),
  KEY `fk_payer_id` (`payer_id`),
  KEY `fk_caregiver_id` (`caregiver_id`),
  CONSTRAINT `fk_care_request_id` FOREIGN KEY (`care_request_id`) REFERENCES `carerequest` (`request_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_payer_id` FOREIGN KEY (`payer_id`) REFERENCES `careseeker` (`careseeker_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_caregiver_id` FOREIGN KEY (`caregiver_id`) REFERENCES `caregiver` (`caregiver_id`) ON DELETE CASCADE ON UPDATE CASCADE
);


alter table consultant_payments
add COLUM we4u_earn decimal(10,2);

alter table consultant_payments
add COLUM is_paid boolean;

alter table care_payments
add COLUM we4u_earn decimal(10,2);

alter table care_payments
add COLUM is_paid boolean;

CREATE TABLE notifications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    message TEXT NOT NULL,
    is_announcement BOOLEAN DEFAULT FALSE,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX (user_id),
    INDEX (is_announcement),
    INDEX (created_at)
);


